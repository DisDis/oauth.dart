{"name":"oauth-server","qualifiedName":"oauth/oauth-server","comment":"<p>Server support for OAuth 1.0a with the dart:io <a>oauth/dart-io.HttpServer</a></p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"isAuthorized":{"name":"isAuthorized","qualifiedName":"oauth/oauth-server.isAuthorized","comment":"<p>Validates that the request contains a valid OAuth signature.</p>\n<p>The request parameters will be validated, and then <a>oauth/oauth-server.isAuthorized.tokenFinder</a> will be\ninvoked in order to look up the secrets(s) associated with the request.\nFinally, the signature will be computed and compared to the passed value\nto ensure that the request is to be authorized.</p>\n<p><a>oauth/oauth-server.isAuthorized.timestampLeeway</a> may be specified, which determines the maximum difference\npermitted between the request timestamp and the present time. The default\nvalue is 10 minutes. You should not vary this value across multiple requests\nas doing so may permit request replay attacks.  </p>\n<p>Returns whether the request should be permitted.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":"null","annotations":[]},"tokenFinder":{"name":"tokenFinder","optional":false,"named":false,"default":false,"type":[{"outer":"oauth/oauth-server.TokenFinder","inner":[]}],"value":"null","annotations":[]},"nonceQuery":{"name":"nonceQuery","optional":false,"named":false,"default":false,"type":[{"outer":"oauth/oauth-server.NonceQuery","inner":[]}],"value":"null","annotations":[]},"timestampLeeway":{"name":"timestampLeeway","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Token","qualifiedName":"oauth/oauth-server.Token","preview":"<p>Bundles together the public and secret portions of an OAuth token.</p>"},{"name":"TokenPair","qualifiedName":"oauth/oauth-server.TokenPair","preview":"<p>A pair of OAuth tokens</p>"}],"typedef":{"NonceQuery":{"name":"NonceQuery","qualifiedName":"oauth/oauth-server.NonceQuery","comment":"<p>Invoked by <code>isAuthorized</code> in order to validate the non-reuse of the request\n nonce.</p>\n<p> Per the OAuth specification, the combination of nonce, consumer key, \n user token key and nonce must be unique per distinct timestamp.</p>\n<p> Instead of the timestamp, this library passes the point in time at which\n the signature will expire, based upon the <code>timestampLeeway</code> parameter passed\n to <code>isAuthorized</code>. Therefore, there is a 1:1 mapping between request \n timestamps and values passed to this function.</p>\n<p> The <code>expiry</code> value is computed as the timestamp passed in the request plus\n two times the <code>timestampLeeway</code> value, in order to avoid risk of attack due\n to server clock skew.</p>\n<p> The implementation should look up the combination of the parameters in a\n database to ensure they have not already been used. Following this, it \n should insert the values of the passed parameters into a database to prevent \n token reuse.</p>\n<p> The implementation should implement a process which periodically sweeps \n expired nonce values from the database.</p>","return":"dart-async.Future","parameters":{"consumerToken":{"name":"consumerToken","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"userToken":{"name":"userToken","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"nonce":{"name":"nonce","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"expiry":{"name":"expiry","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>Invoked by <code>isAuthorized</code> in order to validate the non-reuse of the request\n nonce.</p>"},"TokenFinder":{"name":"TokenFinder","qualifiedName":"oauth/oauth-server.TokenFinder","comment":"<p>Invoked by <code>isAuthorized</code> in order to look up the tokens for a request</p>\n<p>If the <code>oauth_token</code> authorization header parameter was missing, the empty \nstring will be passed as <code>userKey</code>. In this case, it is expected that \n<code>TokenPair.user</code> will be <code>null</code> in the returned <code>TokenPair</code>.</p>","return":"dart-async.Future","parameters":{"consumerKey":{"name":"consumerKey","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"userKey":{"name":"userKey","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>Invoked by <code>isAuthorized</code> in order to look up the tokens for a request</p>"}},"error":[]},"packageName":"oauth","packageIntro":"<p>An implementation of OAuth 1.0a, as per RFC 5849. </p>\n<p>The client portion is designed for use with the http \npackage. The server portion is designed to work with the dart:io\nHttpServer class. </p>\n<p>Supports only HMAC-SHA1 signatures. In practice, RSA-SHA1 signatures are rare\nand most users have switched to OAuth 2. PLAINTEXT signatures are also not \nsupported, and hopefully less common.</p>\n<p>Comes with a test suite. Please report any incompatibility issues.</p>"}